#include <Wire.h>
#include <WiFi.h>
#include <FirebaseESP32.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <DFRobot_ESP_EC.h>

// WiFi Credentials
const char* WIFI_SSID = "gumamela_wifi";        // Replace with your Wi-Fi SSID
const char* WIFI_PASSWORD = "ro$3ma2Low";       // Replace with your Wi-Fi password

// Firebase Credentials
const char* FIREBASE_HOST = "saltik-198-default-rtdb.firebaseio.com";
const char* FIREBASE_AUTH = "KYlTeJtRRligdZvqT0oSpjllKcDG6yZhWED52lup";

// Firebase objects
FirebaseData firebaseData;
FirebaseAuth auth;
FirebaseConfig config;

// Sensor Pins
#define ONE_WIRE_BUS 4     // GPIO pin for DS18B20
#define EC_SENSOR_PIN 35   // GPIO pin for EC sensor

// Motor Pins
const int Motor1_PWM_L = 18;
const int Motor1_PWM_R = 19;
const int Motor1_EN_L = 25;
const int Motor1_EN_R = 26;
const int Motor2_PWM_L = 22;
const int Motor2_PWM_R = 23;
const int Motor2_EN_L = 27;
const int Motor2_EN_R = 32;

// Salinity thresholds
const float SALINITY_MIN = 5.0;
const float SALINITY_MAX = 10.0;

// Temperature compensation constants
#define ALPHA 0.022
#define K 0.8

// Initialize sensors
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
DFRobot_ESP_EC ec;

void setupMotors() {
  pinMode(Motor1_PWM_L, OUTPUT);
  pinMode(Motor1_PWM_R, OUTPUT);
  pinMode(Motor1_EN_L, OUTPUT);
  pinMode(Motor1_EN_R, OUTPUT);
  pinMode(Motor2_PWM_L, OUTPUT);
  pinMode(Motor2_PWM_R, OUTPUT);
  pinMode(Motor2_EN_L, OUTPUT);
  pinMode(Motor2_EN_R, OUTPUT);
}

void activatePump(int pumpNumber) {
  if (pumpNumber == 1) {
    digitalWrite(Motor1_EN_L, HIGH);
    digitalWrite(Motor1_EN_R, HIGH);
    analogWrite(Motor1_PWM_L, HIGH);
    analogWrite(Motor1_PWM_R, LOW);
  } else if (pumpNumber == 2) {
    digitalWrite(Motor2_EN_L, HIGH);
    digitalWrite(Motor2_EN_R, HIGH);
    analogWrite(Motor2_PWM_L, HIGH);
    analogWrite(Motor2_PWM_R, LOW);
  }
}

void deactivatePump(int pumpNumber) {
  if (pumpNumber == 1) {
    digitalWrite(Motor1_EN_L, LOW);
    digitalWrite(Motor1_EN_R, LOW);
  } else if (pumpNumber == 2) {
    digitalWrite(Motor2_EN_L, LOW);
    digitalWrite(Motor2_EN_R, LOW);
  }
}

void setup() {
  Serial.begin(115200);

  // Connect to Wi-Fi
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi Connected!");

  // Firebase config
  config.host = FIREBASE_HOST;
  config.signer.tokens.legacy_token = FIREBASE_AUTH;
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);

  // Sensor and motor init
  sensors.begin();
  ec.begin();
  analogReadResolution(12);
  analogSetAttenuation(ADC_11db);
  setupMotors();
}

void loop() {
  sensors.requestTemperatures();
  float temperatureC = sensors.getTempCByIndex(0);
  float voltage = analogRead(EC_SENSOR_PIN);
  float ecValue25 = ec.readEC(voltage, temperatureC);
  float ecValue = ecValue25 * (1 + ALPHA * (temperatureC - 25));
  float salinity = ecValue / K;

  Serial.print("Temperature: ");
  Serial.print(temperatureC, 2);
  Serial.print(" Â°C, Salinity: ");
  Serial.print(salinity, 2);
  Serial.println(" ppt");

  // Pump logic
  String pumpStatus;
  if (salinity > SALINITY_MAX) {
    activatePump(1);  // Freshwater
    deactivatePump(2);
    pumpStatus = "freshwater";
  } else if (salinity < SALINITY_MIN) {
    activatePump(2);  // Saltwater
    deactivatePump(1);
    pumpStatus = "saltwater";
  } else {
    deactivatePump(1);
    deactivatePump(2);
    pumpStatus = "off";
  }

  // **Send Data to Firebase**
  if (Firebase.setFloat(firebaseData, "/sensor/temperature", floor(temperatureC * 10) / 10)) {
    Serial.println("Temperature updated in Firebase");
  } else {
    Serial.println("Failed to update temperature");
    Serial.println(firebaseData.errorReason());
  }

  if (Firebase.setFloat(firebaseData, "/sensor/ec_value", ecValue)) {
    Serial.println("EC updated in Firebase");
  } else {
    Serial.println("Failed to update EC");
    Serial.println(firebaseData.errorReason());
  }

  if (Firebase.setFloat(firebaseData, "/sensor/salinity", round(salinity))) {
    Serial.println("Salinity updated in Firebase");
  } else {
    Serial.println("Failed to update salinity");
    Serial.println(firebaseData.errorReason());
  }

  delay(5000);  // Send data every 5 seconds
}
